/* Copyright 2022 Hop, Inc */
import{a as y,b as ie,c as se,d as pe,e as v,f as ce,g as de,h}from"./chunk-NJR27TJN.js";import ee from"isomorphic-fetch";var T="https://api.hop.io",k=typeof window<"u";function V(e){return e.charCodeAt(0)===47?e:"/"+e}function X(e){for(let t in e)return!1;return!0}function z(e,t){return e+V(t)}function Z(e){return Object.entries(e).reduce((t,[n,a])=>{if(a===void 0)return t;let r=`${n}=${a.toString()}`;return t===""?r:t+"&"+r},"")}function O(e){let t=/:[^/?#]+/g;return(n,a)=>{a={...a};let r=n.replace(t,p=>{if(p=p.substring(1),p in a){let{[p]:o,...d}=a;if(a=d,o===void 0)throw new Error(`URL param ${p} is undefined`);return typeof o=="number"?o.toString():o}throw new Error(`Missing param ${p}.`)}),c=X(a)?r:`${r}?${Z(a)}`;return z(e,c)}}var g={};y(g,{Channels:()=>A,Ignite:()=>I,Pipe:()=>Y,Projects:()=>R,Registry:()=>G,Users:()=>Q});var A={};y(A,{ChannelType:()=>x});var x=(a=>(a.PRIVATE="private",a.PUBLIC="public",a.UNPROTECTED="unprotected",a))(x||{});var G={};var I={};y(I,{ContainerState:()=>P,DomainState:()=>B,GatewayType:()=>U,Regions:()=>L,RuntimeType:()=>f,VgpuType:()=>M});var L=(t=>(t.US_EAST_1="us-east-1",t))(L||{}),f=(n=>(n.EPHEMERAL="ephemeral",n.PERSISTENT="persistent",n))(f||{}),P=(p=>(p.PENDING="pending",p.RUNNING="running",p.STOPPED="stopped",p.FAILED="failed",p.TERMINATING="terminating",p.EXITED="exited",p))(P||{}),M=(t=>(t.A400="a400",t))(M||{}),U=(n=>(n.INTERNAL="internal",n.EXTERNAL="external",n))(U||{}),B=(a=>(a.PENDING="pending",a.VALID_CNAME="valid_cname",a.SSL_ACTIVE="ssl_active",a))(B||{});var Y={};var R={};y(R,{ProjectTier:()=>H,ProjectType:()=>q});var H=(n=>(n.FREE="free",n.PAID="paid",n))(H||{}),q=(n=>(n.REGULAR="regular",n.PERSONAL="personal",n))(q||{});var Q={};function te(e){return e==="bearer"||e==="pat"||e==="ptk"}var w=class extends Error{constructor(n,a,r){super(r.error.message);this.request=n;this.response=a;this.data=r;this.status=a.status}status},l=class{static getAuthType(t){let n=v(t);if(!te(n))throw new Error(`Invalid authentication type: ${n}`);return n}options;authType;url;constructor(t){this.options=t,this.authType=l.getAuthType(t.authentication),this.url=O(t.baseUrl)}async get(t,n,a){return this.request("GET",t,void 0,n,a)}post(t,n,a,r){return this.request("POST",t,n,a,r)}put(t,n,a,r){return this.request("PUT",t,n,a,r)}patch(t,n,a,r){return this.request("PATCH",t,n,a,r)}delete(t,n,a,r){return this.request("DELETE",t,n,a,r)}async request(t,n,a,r={},c={}){let p=this.url(n,r),o=new Headers({...c?.headers??{},Authorization:this.options.authentication});if(k||o.set("User-Agent","Hop-API-Client"),a!==void 0){if(t==="GET")throw new Error("Cannot send a GET request with a body");o.set("Content-Type","application/json")}let d=new Request(p,{method:t,body:a?JSON.stringify(a):void 0,headers:o,...c}),m=await ee(p,d);if(m.status===204||!m.headers.get("Content-Type")?.includes("application/json"))return;let _=await m.json().catch(u=>({success:!1,error:{code:"local_client_error",message:u.message}}));if(!_.success)throw new w(d,m,_);return _.data}};import{create as ne}from"@onehop/json-methods";var S=e=>{let t=ne().methods({async setState(r){await n(this.id,r,"set")},async patchState(r){await n(this.id,r,"patch")},async subscribeToken(r){await a.subscribeToken(this.id,r)},async subscribeTokens(r){await a.subscribeTokens(this.id,r)},async publishMessage(r,c){await a.publishMessage(this.id,r,c)}});async function n(r,c,p){let o;if(typeof c=="function"){let{state:d}=await e.get("/v1/channels/:channel_id/state",{channel_id:r});o=await c(d)}else o=c;p==="patch"?await e.patch("/v1/channels/:channel_id/state",o,{channel_id:r}):await e.put("/v1/channels/:channel_id/state",o,{channel_id:r})}let a={async create(r,c,p,o){if(!o&&e.authType!=="ptk")throw new Error("Project must be provided when creating a channel with bearer or PAT auth");let{channel:d}=c?await e.put("/v1/channels/:channel_id",{type:r,state:p?.state??null},{project:o,channel_id:c}):await e.post("/v1/channels",{type:r,state:p?.state??null},{project:o});return t.from(d)},async get(r){let{channel:c}=await e.get("/v1/channels/:channel_id",{channel_id:r});return t.from(c)},async getAll(r){let{channels:c}=await e.get("/v1/channels",{project:r});return c.map(t.from)},async subscribeToken(r,c){let p=typeof r=="object"?r.id:r;await e.put("/v1/channels/:channel_id/subscribers/:token",void 0,{channel_id:p,token:c})},async subscribeTokens(r,c){let p=[];for(let o of c)p.push(this.subscribeToken(r,o));await Promise.allSettled(p)},async getAllTokens(r){let c=typeof r=="object"?r.id:r,{tokens:p}=await e.get("/v1/channels/:channel_id/tokens",{channel_id:c});return p},async setState(r,c){let p=typeof r=="object"?r.id:r;return n(p,c,"set")},async patchState(r,c){let p=typeof r=="object"?r.id:r;return n(p,c,"patch")},async publishMessage(r,c,p){let o=typeof r=="object"?r.id:r;await e.post("/v1/channels/:channel_id/messages",{e:c,d:p},{channel_id:o})},tokens:{async create(r,c){if(!c&&e.authType!=="ptk")throw new Error("Project must be provided when creating a channel token with bearer or PAT auth");let{token:p}=await e.post("/v1/channels/tokens",{state:r},{project:c});return p}}};return a};import{create as W}from"@onehop/json-methods";var K=["gb","mb","kb","b"];function Re(e){return K.some(t=>e.endsWith(t)?!isNaN(parseFloat(e.slice(0,-t.length))):!1)}function J(e){e=e.toLowerCase();let t=K.find(a=>e.endsWith(a));if(!t)throw new Error(`Invalid size: ${e}`);let n=parseFloat(e.slice(0,-t.length));if(isNaN(n))throw new Error(`Invalid size: ${e}`);switch(t.toLowerCase()){case"gb":return n*1024*1024*1024;case"mb":return n*1024*1024;case"kb":return n*1024;case"b":default:return n}}var re=6*1024*1024,C=e=>{let t=W().methods({async addDomain(o){await e.post("/v1/ignite/gateways/:gateway_id/domains",{domain:o},{gateway_id:this.id})}}),n=W().methods({getContainers(){return p.deployments.getContainers(this.id)},delete(){return p.deployments.delete(this.id)},createContainer(){return p.containers.create(this.id)},createGateway(o,d,m){return p.deployments.gateways.create(this.id,o,d,m)}});async function a(o,d){let m,_;if(typeof o=="object")if(e.authType==="ptk")m=o;else throw new Error("First argument must be the project ID when using bearer authentication to create deployments.");else{if(!d)throw new Error("Second argument must be the deployment config when using bearer authentication to create deployments.");if(e.authType==="bearer"||e.authType==="pat")_=o,m=d;else throw new Error("Only argument must be the config when using secret authentication to create deployments.")}if(J(m.resources.ram)<=re)throw new Error("Allocated memory must be greater than 6MB when creating a deployment.");let{deployment:u}=await e.post("/v1/ignite/deployments",m,{project:_});return n.from(u)}async function r(o,d){await e.put("/v1/ignite/containers/:container_id/state",{preferred_state:d},{container_id:o})}async function c(o,d){if(d){h(o,"project","You must provide a project ID to get a deployment by name");let{deployment:_}=await e.get("/v1/ignite/deployments/search",{name:d,project:o});return n.from(_)}h(o,"deployment","You must provide a valid deployment ID.");let{deployment:m}=await e.get("/v1/ignite/deployments/:deployment_id",{deployment_id:o});return n.from(m)}let p={gateways:{async addDomain(o,d){await e.post("/v1/ignite/gateways/:gateway_id/domains",{domain:d},{gateway_id:o})},async get(o){let{gateway:d}=await e.get("/v1/ignite/gateways/:gateway_id",{gateway_id:o});return d}},deployments:{create:a,get:c,async getContainers(o){let{containers:d}=await e.get("/v1/ignite/deployments/:deployment_id/containers",{deployment_id:o});return d},async getAll(o){if(e.authType!=="ptk"&&!o)throw new Error("Project ID is required for Bearer or PAT authentication");if(e.authType==="ptk"&&o)throw new Error("Project ID is not required for secret authentication");let{deployments:d}=await e.get("/v1/ignite/deployments",o?{project:o}:{});return d.map(n.from)},async delete(o){await e.delete("/v1/ignite/deployments/:deployment_id",void 0,{deployment_id:o})},gateways:{async getAll(o){let{gateways:d}=await e.get("/v1/ignite/deployments/:deployment_id/gateways",{deployment_id:o});return d.map(t.from)},async create(o,d,m,_){let u=typeof o=="object"?o.id:o,{gateway:F}=await e.post("/v1/ignite/deployments/:deployment_id/gateways",{type:d,protocol:m,listening_port:_},{deployment_id:u});return t.from(F)}}},containers:{async delete(o){await e.delete("/v1/ignite/containers/:container_id",void 0,{container_id:o})},async getLogs(o,d={}){let{logs:m}=await e.get("/v1/ignite/containers/:container_id/logs",{container_id:o,...d});return m},async stop(o){await r(o,g.Ignite.ContainerState.STOPPED)},async start(o){await r(o,g.Ignite.ContainerState.RUNNING)},async create(o){let{container:d}=await e.post("/v1/ignite/deployments/:deployment_id/containers",void 0,{deployment_id:o});return d}}};return p};import{create as oe}from"@onehop/json-methods";var b=e=>{let t=oe().methods({async delete(){await n.rooms.delete(this.id)}}),n={rooms:{async getAll(a){if(!a&&e.authType!=="ptk")throw new Error("You must provide ID project id when using a bearer or pat token.");let{rooms:r}=await e.get("/v1/pipe/rooms",{project:a});return r.map(t.from)},async create(a,r){let{room:c}=await e.post("/v1/pipe/rooms",{name:a,ingest_protocol:r.ingestProtocol,region:"us-east-1",ephemeral:r.ephemeral??!1,delivery_protocols:r.deliveryProtocols,llhls_config:r.hlsConfig},{});return t.from(c)},async delete(a){await e.delete("/v1/pipe/rooms/:room_id",void 0,{room_id:a})}}};return n};var N=e=>({async getAllMembers(t){if(e.authType!=="ptk"&&!t)throw new Error("Project ID is required for bearer or PAT authentication to fetch all project members");if(t){let{members:a}=await e.get("/v1/projects/:project_id/members",{project_id:t});return a}let{members:n}=await e.get("/v1/projects/@this/members",{});return n},async getCurrentMember(t){if(e.authType==="ptk")throw new Error("You cannot resolve a member from a project token! You must use a bearer or pat token");let{project_member:n}=await e.get("/v1/projects/:project_id/members/@me",{project_id:t});return n},projectTokens:{async delete(t,n){if(e.authType!=="ptk"&&!n)throw new Error("Project ID is required for bearer or PAT authentication to delete a project token");await e.delete(n?"/v1/projects/:project_id/tokens/:project_token_id":"/v1/projects/@this/tokens/:project_token_id",void 0,n?{project_id:n,project_token_id:t}:{project_token_id:t})},async get(t){if(e.authType!=="ptk"&&!t)throw new Error("Project ID is required for bearer or PAT authentication");if(!t){let{project_tokens:a}=await e.get("/v1/projects/@this/tokens",{});return a}let{project_tokens:n}=await e.get("/v1/projects/:project_id/tokens",{project_id:t});return n},async create(t,n){if(!n&&e.authType!=="ptk")throw new Error("Project ID is required for bearer or PAT authentication to create a project token");if(!n){let{project_token:r}=await e.post("/v1/projects/@this/tokens",{flags:t},{});return r}let{project_token:a}=await e.post("/v1/projects/:project_id/tokens",{flags:t},{project_id:n});return a}},secrets:{async getAll(t){if(e.authType!=="ptk"&&!t)throw new Error("Project ID is required for bearer or PAT authentication to fetch all secrets");if(!t){let{secrets:a}=await e.get("/v1/projects/@this/secrets",{});return a}let{secrets:n}=await e.get("/v1/projects/:project_id/secrets",{project_id:t});return n},async create(t,n,a){if(e.authType!=="ptk"&&!a)throw new Error("Project ID is required for bearer or PAT authentication to create a secret");if(!a){let c=await e.put("/v1/projects/@this/secrets/:name",n,{name:t});return console.log(c),c}let{secret:r}=await e.put("/v1/projects/:project_id/secrets/:name",n,{project_id:a,name:t});return r},async delete(t,n){if(e.authType!=="ptk"&&!n)throw new Error("Project ID is required for bearer or PAT authentication to delete a secret");if(!n){await e.delete("/v1/projects/@this/secrets/:secret_id",void 0,{secret_id:t});return}await e.delete("/v1/projects/:project_id/secrets/:secret_id",void 0,{secret_id:t,project_id:n})}}});var D=e=>({images:{async getAll(t){if(!t&&e.authType!=="ptk")throw new Error("Project is required when using a PAT or bearer");let{images:n}=await e.get("/v1/registry/images",{project:t});return n},async getManifest(t){let{manifests:n}=await e.get("/v1/registry/images/:image/manifests",{image:t});return n},async delete(t){await e.delete("/v1/registry/images/:image",void 0,{image:t})}}});var j=e=>({me:{async get(){if(e.authType==="ptk")throw new Error("You cannot resolve a user from a project token! You must use a Bearer or PAT.");return await e.get("/v1/users/@me",{})},pats:{async create(t){if(e.authType==="ptk")throw new Error("You cannot create a PAT from a project token! You must use a Bearer or PAT.");let{pat:n}=await e.post("/v1/users/@me/pats",{name:t},{});return n},async getAll(){if(e.authType==="ptk")throw new Error("You cannot get all PATs from a project token! You must use a Bearer or PAT.");let{pats:t}=await e.get("/v1/users/@me/pats",{});return t},async delete(t){if(e.authType==="ptk")throw new Error("You cannot delete a PAT from a project token! You must use a Bearer or PAT.");await e.delete("/v1/users/@me/pats/:pat_id",void 0,{pat_id:t})}}}});var $=class{client;ignite;users;projects;pipe;registry;channels;constructor(t,n=T){if(!t||typeof t=="object"&&!t.authentication)throw new Error("Missing authentication token to `new Hop()` \u2014 please provide a valid Project Token, User Bearer or Personal Access Token");this.client=new l(typeof t=="object"?{baseUrl:T,...t}:{authentication:t,baseUrl:n}),this.ignite=C(this.client),this.users=j(this.client),this.projects=N(this.client),this.pipe=b(this.client),this.registry=D(this.client),this.channels=S(this.client)}};var ae=(s=>(s.ADD_MEMBER="add_member",s.REMOVE_MEMBER="remove_member",s.GET_PROJECT_MEMBERS="get_project_members",s.DELETE_PROJECT="delete_project",s.DELETE_DEPLOYMENT="delete_deployment",s.DELETE_CONTAINER="delete_container",s.UPDATE_CONTAINER_STATE="update_container_state",s.READ_DEPLOYMENTS="read_deployments",s.CREATE_DEPLOYMENT="create_deployment",s.CREATE_CONTAINER="create_container",s.UPDATE_CONTAINER_CONFIG="update_container_config",s.CREATE_ROOM="create_room",s.READ_ROOM="read_room",s.DELETE_ROOM="delete_room",s.CREATE_ROOM_PRODUCER="create_room_producer",s.CREATE_PROJECT_TOKEN="create_project_token",s.DELETE_PROJECT_TOKEN="delete_project_token",s.READ_PROJECT_TOKENS="read_project_tokens",s.READ_CONTAINER_LOGS="read_container_logs",s.CREATE_PROJECT_SECRET="create_project_secret",s.READ_PROJECT_SECRETS="read_project_secrets",s.DELETE_PROJECT_SECRET="delete_project_secret",s.GET_REGISTRY_IMAGES="get_registry_images",s.CREATE_CHANNEL="create_channel",s.CREATE_CHANNEL_TOKEN="create_channel_token",s.CREATE_LEAP_TOKEN="create_leap_token",s.CREATE_GATEWAY="create_gateway",s.ADD_DOMAIN="add_domain",s.DELETE_CHANNELS="delete_channels",s.UPDATE_CHANNEL_STATE="update_channel_state",s.PUBLISH_CHANNEL_MESSAGES="publish_channel_messages",s.READ_CHANNELS="read_channels",s.READ_LEAP_TOKENS="read_leap_tokens",s.MANAGE_CHANNEL_SUBSCRIBERS="manage_channel_subscribers",s.UPDATE_LEAP_TOKEN="update_leap_token",s.DELETE_DOMAIN="delete_domain",s.DELETE_GATEWAY="delete_gateway",s.GET_INTERNAL_DOMAIN="get_internal_domain",s.MESSAGE_TOKEN="message_token",s.ROLLOUT="rollout",s.REQUEST_QUOTA_INCREASE="request_quota_increase",s.READ_BILLING="read_billing",s.READ_GATEWAYS="read_gateways",s.DELETE_REGISTRY_IMAGES="delete_registry_images",s))(ae||{}),i={["add_member"]:1n<<0n,["remove_member"]:1n<<1n,["get_project_members"]:1n<<2n,["delete_project"]:1n<<3n,["delete_deployment"]:1n<<4n,["delete_container"]:1n<<5n,["update_container_state"]:1n<<6n,["read_deployments"]:1n<<7n,["create_deployment"]:1n<<8n,["create_container"]:1n<<9n,["update_container_config"]:1n<<10n,["create_room"]:1n<<11n,["read_room"]:1n<<12n,["delete_room"]:1n<<13n,["create_room_producer"]:1n<<14n,["create_project_token"]:1n<<15n,["delete_project_token"]:1n<<16n,["read_project_tokens"]:1n<<17n,["read_container_logs"]:1n<<18n,["create_project_secret"]:1n<<19n,["read_project_secrets"]:1n<<20n,["delete_project_secret"]:1n<<21n,["get_registry_images"]:1n<<22n,["create_channel_token"]:1n<<24n,["create_gateway"]:1n<<25n,["add_domain"]:1n<<26n,["delete_channels"]:1n<<27n,["update_channel_state"]:1n<<28n,["read_channels"]:1n<<29n,["publish_channel_messages"]:1n<<30n,["manage_channel_subscribers"]:1n<<31n,["delete_domain"]:1n<<32n,["delete_gateway"]:1n<<33n,["get_internal_domain"]:1n<<34n,["create_leap_token"]:1n<<35n,["read_leap_tokens"]:1n<<36n,["update_leap_token"]:1n<<37n,["message_token"]:1n<<38n,["create_channel"]:1n<<39n,["rollout"]:1n<<40n,["request_quota_increase"]:1n<<41n,["read_billing"]:1n<<42n,["read_gateways"]:1n<<43n,["delete_registry_images"]:1n<<44n},E={MANAGE_MEMBERS:i.add_member|i.remove_member|i.get_project_members,MANAGE_PROJECT_TOKENS:i.create_project_token|i.delete_project_token|i.read_project_tokens,MANAGE_DEPLOYMENTS:i.create_container|i.delete_container|i.update_container_state|i.read_container_logs|i.update_container_config|i.add_domain|i.delete_domain|i.create_deployment|i.delete_deployment|i.read_deployments|i.rollout|i.delete_gateway|i.get_internal_domain,MANAGE_PIPE:i.create_room|i.delete_room|i.read_room,MANAGE_SECRETS:i.create_project_secret|i.delete_project_secret|i.read_project_secrets,MANAGE_CHANNELS:i.create_leap_token|i.create_channel_token|i.create_gateway|i.read_leap_tokens|i.update_leap_token|i.create_channel|i.delete_channels|i.update_channel_state|i.read_channels|i.publish_channel_messages|i.manage_channel_subscribers|i.message_token,MANAGE_REGISTRY:i.get_registry_images|i.delete_registry_images,READ_ONLY:i.read_deployments|i.read_container_logs|i.read_room|i.read_channels|i.read_project_tokens|i.read_project_secrets|i.read_leap_tokens|i.get_project_members|i.read_gateways,MANAGE_QUOTAS:i.request_quota_increase,MANAGE_ROLLOUTS:i.rollout,MANAGE_BILLING:i.read_billing},Ve={viewer:E.READ_ONLY,editor:E.MANAGE_CHANNELS|E.MANAGE_DEPLOYMENTS|E.MANAGE_PIPE|E.MANAGE_SECRETS|E.MANAGE_REGISTRY|E.READ_ONLY,admin:E.MANAGE_CHANNELS|E.MANAGE_DEPLOYMENTS|E.MANAGE_MEMBERS|E.MANAGE_PIPE|E.MANAGE_PROJECT_TOKENS|E.MANAGE_SECRETS|E.MANAGE_REGISTRY|E.MANAGE_QUOTAS|E.READ_ONLY,owner:E.MANAGE_CHANNELS|E.MANAGE_DEPLOYMENTS|E.MANAGE_MEMBERS|E.MANAGE_PIPE|E.MANAGE_PROJECT_TOKENS|E.MANAGE_SECRETS|E.MANAGE_REGISTRY|E.MANAGE_QUOTAS|E.MANAGE_ROLLOUTS|E.MANAGE_BILLING},Xe={add(e,t){return BigInt(e)|BigInt(t)},test(e,t){return Boolean(BigInt(e)&BigInt(t))},subtract(e,t){return BigInt(e)&~BigInt(t)}};export{g as API,l as APIClient,E as BROAD_PERMISSIONS_MAP,P as ContainerState,T as DEFAULT_BASE_URL,$ as Hop,w as HopAPIError,ie as ID_PREFIXES,k as IS_BROWSER,ae as PROJECT_PERMISSION,f as RuntimeType,ce as asId,h as assertId,v as getIdPrefix,de as id,Re as isValidByteString,J as parseSize,Xe as permissions,i as permissionsMap,Ve as roles,K as units,te as validateAPIAuthentication,pe as validateId,se as validateIdPrefix};
//# sourceMappingURL=index.js.map