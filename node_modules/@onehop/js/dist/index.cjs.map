{"version":3,"sources":["../src/rest/client.ts","../src/util/constants.ts","../src/util/urls.ts","../src/rest/types/api.ts","../src/rest/types/channels.ts","../src/rest/types/registry.ts","../src/rest/types/ignite.ts","../src/rest/types/pipe.ts","../src/rest/types/projects.ts","../src/rest/types/users.ts","../src/sdks/channels.ts","../src/sdks/ignite.ts","../src/util/size.ts","../src/sdks/pipe.ts","../src/sdks/projects.ts","../src/sdks/registry.ts","../src/sdks/users.ts","../src/hop.ts","../src/permissions.ts"],"names":["fetch","DEFAULT_BASE_URL","IS_BROWSER","lead","x","isObjectEmpty","object","_","join","a","b","querystring","query","acc","key","value","result","createURLBuilder","base","regex","path","urlWithQuery","param","rest","urlWithSearch","api_exports","__export","channels_exports","ignite_exports","pipe_exports","projects_exports","registry_exports","users_exports","ChannelType","ContainerState","DomainState","GatewayType","Regions","RuntimeType","VgpuType","ProjectTier","ProjectType","validateAPIAuthentication","auth","HopAPIError","request","response","data","APIClient","prefix","getIdPrefix","options","init","body","method","url","headers","error","create","channels","client","Channels","state","updateState","token","channelsSDK","tokens","name","channelId","newState","mode","oldState","type","id","project","channel","promises","subscription","units","isValidByteString","unit","parseSize","size","u","num","SIX_MB_IN_BYTES","ignite","Gateways","domain","Deployments","igniteSDK","protocol","port","createDeployment","configOrProject","bearerOrPatConfig","config","deployment","updateContainerState","container","getDeployment","projectIdOrId","assertId","gatewayId","gateway","containers","projectId","deployments","deploymentId","gateways","listeningPort","logs","pipe","Rooms","pipeSDK","rooms","room","projects","members","member","projectTokenId","keys","flags","secrets","s","secret","registry","images","image","manifests","users","pat","pats","Hop","authenticationOrOptions","baseUrl","PROJECT_PERMISSION","permissionsMap","BROAD_PERMISSIONS_MAP","roles","permissions","flag"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-fetch';\nimport {ExtractRouteParams} from '../util/index.js';\nimport {IS_BROWSER} from '../util/constants.js';\nimport {createURLBuilder} from '../util/urls.js';\nimport {APIResponse, Endpoints, ErroredAPIResponse} from './endpoints.js';\nimport {getIdPrefix, Id, Method} from './types/index.js';\n\nexport type APIAuthentication = Id<'ptk'> | Id<'bearer'> | Id<'pat'>;\n\nexport type APIAuthenticationType = APIAuthentication extends Id<infer T>\n\t? T\n\t: never;\n\nexport function validateAPIAuthentication(\n\tauth: string,\n): auth is APIAuthenticationType {\n\treturn auth === 'bearer' || auth === 'pat' || auth === 'ptk';\n}\n\nexport interface APIClientOptions {\n\treadonly baseUrl: string;\n\treadonly authentication: APIAuthentication;\n}\n\nexport class HopAPIError extends Error {\n\tpublic readonly status: number;\n\n\tconstructor(\n\t\tpublic readonly request: Request,\n\t\tpublic readonly response: Response,\n\t\tpublic readonly data: ErroredAPIResponse,\n\t) {\n\t\tsuper(data.error.message);\n\n\t\tthis.status = response.status;\n\t}\n}\n\nexport type Query<Path extends string> = ExtractRouteParams<Path> &\n\tRecord<string, string | number | undefined>;\n\nexport class APIClient {\n\tpublic static getAuthType(auth: APIAuthentication) {\n\t\tconst prefix = getIdPrefix(auth);\n\n\t\tif (!validateAPIAuthentication(prefix)) {\n\t\t\tthrow new Error(`Invalid authentication type: ${prefix}`);\n\t\t}\n\n\t\treturn prefix;\n\t}\n\n\tprivate readonly options;\n\n\tpublic readonly authType;\n\tpublic readonly url;\n\n\tconstructor(options: APIClientOptions) {\n\t\tthis.options = options;\n\t\tthis.authType = APIClient.getAuthType(options.authentication);\n\t\tthis.url = createURLBuilder(options.baseUrl);\n\t}\n\n\tasync get<Path extends Extract<Endpoints, {method: 'GET'}>['path']>(\n\t\tpath: Path,\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<Extract<Endpoints, {path: Path; method: 'GET'}>['res']>(\n\t\t\t'GET',\n\t\t\tpath,\n\t\t\tundefined,\n\t\t\tquery,\n\t\t\tinit,\n\t\t);\n\t}\n\n\tpost<Path extends Extract<Endpoints, {method: 'POST'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'POST'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'POST'}>['res']\n\t\t>('POST', path, body, query, init);\n\t}\n\n\tput<Path extends Extract<Endpoints, {method: 'PUT'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'PUT'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<Extract<Endpoints, {path: Path; method: 'PUT'}>['res']>(\n\t\t\t'PUT',\n\t\t\tpath,\n\t\t\tbody,\n\t\t\tquery,\n\t\t\tinit,\n\t\t);\n\t}\n\n\tpatch<Path extends Extract<Endpoints, {method: 'PATCH'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'PATCH'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'PATCH'}>['res']\n\t\t>('PATCH', path, body, query, init);\n\t}\n\n\tdelete<Path extends Extract<Endpoints, {method: 'DELETE'}>['path']>(\n\t\tpath: Path,\n\t\tbody: Extract<Endpoints, {path: Path; method: 'DELETE'}>['body'],\n\t\tquery: Query<Path>,\n\t\tinit?: RequestInit,\n\t) {\n\t\treturn this.request<\n\t\t\tExtract<Endpoints, {path: Path; method: 'DELETE'}>['res']\n\t\t>('DELETE', path, body, query, init);\n\t}\n\n\tprivate async request<T>(\n\t\tmethod: Method,\n\t\tpath: string,\n\t\tbody: unknown,\n\t\tquery: Record<string, string | number | undefined> = {},\n\t\tinit: RequestInit = {},\n\t) {\n\t\tconst url = this.url(path, query);\n\n\t\tconst headers = new Headers({\n\t\t\t...(init?.headers ?? {}),\n\t\t\tAuthorization: this.options.authentication,\n\t\t});\n\n\t\tif (!IS_BROWSER) {\n\t\t\theaders.set('User-Agent', 'Hop-API-Client');\n\t\t}\n\n\t\t// Treat falsy values as valid body\n\t\t// only undefined is not\n\t\tif (body !== undefined) {\n\t\t\tif (method === 'GET') {\n\t\t\t\tthrow new Error('Cannot send a GET request with a body');\n\t\t\t}\n\n\t\t\theaders.set('Content-Type', 'application/json');\n\t\t}\n\n\t\tconst request = new Request(url, {\n\t\t\tmethod,\n\t\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\t\theaders,\n\t\t\t...init,\n\t\t});\n\n\t\tconst response = await fetch(url, request);\n\n\t\tif (\n\t\t\tresponse.status === 204 ||\n\t\t\t!response.headers.get('Content-Type')?.includes('application/json')\n\t\t) {\n\t\t\t// Probably a DELETE request with no body returned, so return undefined here\n\t\t\t// This cast is (prolly) safe because endpoints that return nothing\n\t\t\t// are typed as `Empty`\n\t\t\treturn undefined as unknown as T;\n\t\t}\n\n\t\tconst result = await (response.json() as Promise<APIResponse<T>>).catch(\n\t\t\t(error: Error): ErroredAPIResponse => {\n\t\t\t\treturn {\n\t\t\t\t\tsuccess: false,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 'local_client_error',\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\n\t\tif (!result.success) {\n\t\t\tthrow new HopAPIError(request, response, result);\n\t\t}\n\n\t\treturn result.data;\n\t}\n}\n","/**\n * The default base URL for Hop's API.\n */\nexport const DEFAULT_BASE_URL = 'https://api.hop.io';\n\n/**\n * If we are in the browser.\n */\nexport const IS_BROWSER = typeof window !== 'undefined';\n","import {ExtractRouteParams, Query} from '../rest/index.js';\n\nexport function lead(x: string) {\n\treturn x.charCodeAt(0) === 47 ? x : '/' + x;\n}\n\nexport function isObjectEmpty(object: object) {\n\tfor (const _ in object) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function join(a: string, b: string) {\n\treturn a + lead(b);\n}\n\nexport function querystring(query: Query<string>) {\n\treturn Object.entries(query).reduce((acc, [key, value]) => {\n\t\tif (value === undefined) {\n\t\t\treturn acc;\n\t\t}\n\n\t\tconst result = `${key}=${value.toString()}`;\n\n\t\tif (acc === '') {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn acc + '&' + result;\n\t}, '');\n}\n\nexport function createURLBuilder(base: string) {\n\tconst regex = /:[^/?#]+/g;\n\n\treturn <Path extends string>(path: Path, query: Query<Path>) => {\n\t\tquery = {...query};\n\n\t\tconst urlWithQuery = path.replace(regex, param => {\n\t\t\tparam = param.substring(1);\n\n\t\t\tif (param in query) {\n\t\t\t\tconst {[param]: value, ...rest} = query;\n\t\t\t\tquery = rest as ExtractRouteParams<Path>;\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tthrow new Error(`URL param ${param} is undefined`);\n\t\t\t\t}\n\n\t\t\t\tif (typeof value === 'number') {\n\t\t\t\t\treturn value.toString();\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tthrow new Error(`Missing param ${param}.`);\n\t\t});\n\n\t\tconst urlWithSearch = isObjectEmpty(query)\n\t\t\t? urlWithQuery\n\t\t\t: `${urlWithQuery}?${querystring(query as Query<string>)}`;\n\n\t\treturn join(base, urlWithSearch);\n\t};\n}\n","export * as Channels from './channels.js';\nexport * as Registry from './registry.js';\nexport * as Ignite from './ignite.js';\nexport * as Pipe from './pipe.js';\nexport * as Projects from './projects.js';\nexport * as Users from './users.js';\n","import {Endpoint} from '../endpoints.js';\nimport {Project} from './projects.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\nexport enum ChannelType {\n\tPRIVATE = 'private',\n\tPUBLIC = 'public',\n\tUNPROTECTED = 'unprotected',\n}\n\nexport type State = Record<string, unknown>;\n\nexport interface Channel {\n\t/**\n\t * The ID of the channel\n\t */\n\tid: string;\n\n\t/**\n\t * The project it is associated with\n\t */\n\tproject: Project;\n\n\t/**\n\t * State metadata\n\t */\n\tstate: State;\n\n\t/**\n\t * Capabilities of the channel\n\t */\n\tcapabilities: number;\n\n\t/**\n\t * When this channel was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The type of this channel\n\t */\n\ttype: ChannelType;\n}\n\nexport interface ChannelToken {\n\t/**\n\t * The ID for the token\n\t */\n\tid: Id<'leap_token'>;\n\n\t/**\n\t * State for this token\n\t */\n\tstate: State;\n\n\t/**\n\t * The project this channel token is associated with\n\t */\n\tproject_id: Id<'project'>;\n}\n\nexport type ChannelEndpoints =\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels',\n\t\t\t{channel: Channel},\n\t\t\t{type: ChannelType; state: Record<string, any> | null}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/channels/:channel_id',\n\t\t\t{channel: Channel},\n\t\t\t{type: ChannelType; state: Record<string, any> | null}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels/tokens',\n\t\t\t{token: ChannelToken},\n\t\t\t{state: State}\n\t  >\n\t| Endpoint<'DELETE', '/v1/channels/:channel_id', Empty>\n\t| Endpoint<'GET', '/v1/channels/:channel_id', {channel: Channel}>\n\t| Endpoint<'GET', '/v1/channels/:channel_id/tokens', {tokens: ChannelToken[]}>\n\t| Endpoint<'PUT', '/v1/channels/:channel_id/subscribers/:token', Empty>\n\t| Endpoint<'PATCH', '/v1/channels/:channel_id/state', Empty, State>\n\t| Endpoint<'PUT', '/v1/channels/:channel_id/state', Empty, State>\n\t| Endpoint<'GET', '/v1/channels/:channel_id/state', {state: State}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/channels/:channel_id/messages',\n\t\t\tEmpty,\n\t\t\t{e: string; d: unknown}\n\t  >\n\t| Endpoint<'GET', '/v1/channels', {channels: Channel[]}>;\n","import {Endpoint} from '../endpoints.js';\nimport {Empty} from '../../util/types.js';\n\nexport type RegistryEndpoints =\n\t| Endpoint<'DELETE', '/v1/registry/images/:image', Empty>\n\t| Endpoint<'GET', '/v1/registry/images', {images: string[]}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/registry/images/:image/manifests',\n\t\t\t{\n\t\t\t\tmanifests: {\n\t\t\t\t\tdigest: {\n\t\t\t\t\t\tdigest: string;\n\t\t\t\t\t\tsize: number;\n\t\t\t\t\t\tuploaded: string;\n\t\t\t\t\t};\n\t\t\t\t\ttag: string | null;\n\t\t\t\t}[];\n\t\t\t}\n\t  >;\n","import {ByteString} from '../../util/index.js';\nimport {Endpoint} from '../endpoints.js';\nimport {\n\tEmpty,\n\tHopShDomain,\n\tId,\n\tInternalHopDomain,\n\tTimestamp,\n} from '../../util/types.js';\n\nexport enum Regions {\n\tUS_EAST_1 = 'us-east-1',\n}\n\n/**\n * Runtime types are used to describe the type of a deployment or container\n */\nexport enum RuntimeType {\n\t/**\n\t * Ephemeral deployments/containers are sort of fire and forget. Containers won't restart if they exit but they can still be terminated programatically.\n\t */\n\tEPHEMERAL = 'ephemeral',\n\n\t/**\n\t * Persistent deployments/containers will restart if they exit. They can also be started and stopped programmatically.\n\t */\n\tPERSISTENT = 'persistent',\n}\n\n/**\n * Container state is relatively self-explanatory. It describes what the container is currently doing.\n */\nexport enum ContainerState {\n\t/**\n\t * The container is pending creation\n\t */\n\tPENDING = 'pending',\n\n\t/**\n\t * The container is running\n\t */\n\tRUNNING = 'running',\n\n\t/**\n\t * The container is stopped\n\t */\n\tSTOPPED = 'stopped',\n\n\t/**\n\t * The container's entrypoint failed (e.g. exited with a non-zero exit code)\n\t */\n\tFAILED = 'failed',\n\n\t/**\n\t * The container is being deleted\n\t */\n\tTERMINATING = 'terminating',\n\n\t/**\n\t * The container exited (e.g. with a zero exit code)\n\t */\n\tEXITED = 'exited',\n}\n\n/**\n * Types for supported GPU\n */\nexport enum VgpuType {\n\tA400 = 'a400',\n}\n\nexport interface Container {\n\t/**\n\t * The ID of the container\n\t */\n\tid: Id<'container'>;\n\n\t/**\n\t * The time this container was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The region this container runs in\n\t */\n\tregion: Regions;\n\n\t/**\n\t * Information about uptime/downtime for this container\n\t */\n\tuptime: {\n\t\t/**\n\t\t * The last time this container was started at\n\t\t */\n\t\tlast_start: Timestamp;\n\t};\n\n\t/**\n\t * The type of this container\n\t */\n\ttype: RuntimeType;\n\n\t/**\n\t * The internal IP of the container\n\t */\n\tinternal_ip: string;\n\n\t/**\n\t * The ID of the deployment this container is associated with\n\t */\n\tdeployment_id: Id<'deployment'>;\n\n\t/**\n\t * The state this container is in\n\t */\n\tstate: ContainerState;\n}\n\nexport interface Deployment {\n\t/**\n\t * The ID of the deployment\n\t */\n\tid: Id<'deployment'>;\n\n\t/**\n\t * The name of the deployment\n\t */\n\tname: string;\n\n\t/**\n\t * The amount of containers this deployment is currently running\n\t */\n\tcontainer_count: number;\n\n\t/**\n\t * The time this deployment was created at\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * The config for this deployment\n\t */\n\tconfig: DeploymentConfig;\n}\n\n// This is a type not an interface so we can make a union\n// when future versions of deployment configs come out\nexport type DeploymentConfig = {\n\t/**\n\t * The name of the deployment\n\t */\n\tname: string;\n\n\t/**\n\t * The strategy for scaling multiple containers.\n\t *\n\t * Manual = add containers yourself\n\t *\n\t * @warning This property is not yet fully complete\n\t */\n\tcontainer_strategy: 'manual';\n\n\t/**\n\t * The type of this deployment\n\t */\n\ttype: RuntimeType;\n\n\t/**\n\t * The version of this config\n\t */\n\tversion: '2022-05-17';\n\n\t/**\n\t * The docker image config for this deployment\n\t */\n\timage: Image;\n\n\t/**\n\t * Environment variables for this deployment\n\t */\n\tenv: Record<string, string>;\n\n\t/**\n\t * Resources allocated to this deployment\n\t */\n\tresources: Resources;\n};\n\n/**\n * Docker image config\n */\nexport interface Image {\n\t/**\n\t * The name of the docker image\n\t */\n\tname: string | null;\n\n\t/**\n\t * Authorization required for the registry to access this image\n\t * This is not required if you use Hop's own registry.\n\t */\n\tauth: Auth | null;\n\n\t/**\n\t * GitHub repo information (if applicable)\n\t */\n\tgh_repo: ImageGHRepo | null;\n}\n\n/**\n * Docker image registry authorization\n */\nexport interface Auth {\n\tusername: string;\n\tpassword: string;\n}\n\n/**\n * GitHub repo type sent from API (NOT USED IN IMAGES)\n */\nexport interface GHRepo {\n\tid: number;\n\tfull_name: string;\n\tprivate: boolean;\n\tdefault_branch: string;\n\taccount_name: string;\n}\n\n/**\n * GitHub repo partial used for images\n */\nexport interface ImageGHRepo {\n\trepo_id: number;\n\tfull_name: string;\n\tbranch: string;\n}\n\n/**\n * Resources allocated to a deployment\n */\nexport interface Resources {\n\t/**\n\t * Amount of vCPU to allocate\n\t */\n\tvcpu: number;\n\n\t/**\n\t * Amount of memory to allocate in a readible format\n\t * You can use the `parseSize` function to convert this to bytes.\n\t */\n\tram: ByteString;\n\n\t/**\n\t * vGPUs to allocate\n\t */\n\tvgpu: Vgpu[];\n}\n\n/**\n * Virtual GPU config\n */\nexport interface Vgpu {\n\t/**\n\t * The type of vGPU to allocate\n\t */\n\ttype: VgpuType;\n\n\t/**\n\t * The amount of vGPUs to allocate\n\t */\n\tcount: number;\n}\n\n/**\n * Logs from a container\n */\nexport interface ContainerLog {\n\t/**\n\t * The timestamp of the log\n\t */\n\ttimestamp: Timestamp;\n\n\t/**\n\t * The log message\n\t */\n\tmessage: string;\n\n\t/**\n\t * The ID of the document in elasticsearch. You probably won't have to use this, but\n\t * it might be useful for React keys, for example, as they are unique.\n\t */\n\tnonce: string;\n\n\t/**\n\t * The level of the log. stdout becomes `info`\n\t */\n\tlevel: 'info' | 'stderr';\n}\n\n/**\n * Types of gateways supported by Hop\n */\nexport enum GatewayType {\n\t/**\n\t * The gateway can only be accessed inside of a project's network\n\t */\n\tINTERNAL = 'internal',\n\n\t/**\n\t * The gateway can be accessed from the internet\n\t */\n\tEXTERNAL = 'external',\n}\n\n/**\n * Gateways are used to connect services to the internet or a private network\n */\nexport interface Gateway {\n\t/**\n\t * The ID of the gateway\n\t */\n\tid: Id<'gateway'>;\n\n\t/**\n\t * The type of the gateway\n\t */\n\ttype: GatewayType;\n\n\t/**\n\t * The name of the gateway\n\t */\n\tname: string;\n\n\t/**\n\t * The protocol for this gateway (Only for external)\n\t *\n\t * @warning Currently, hop only supports HTTP. This will eventually change to an enum\n\t */\n\tprotocol: 'http' | null;\n\n\t/**\n\t * The deployment this gateway is associated with\n\t */\n\tdeployment_id: Id<'deployment'>;\n\n\t/**\n\t * The date this gateway was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Domain automatically assigned by Hop\n\t */\n\thopsh_domain: HopShDomain | null;\n\n\t/**\n\t * Internal domain assigned by user upon gateway creation\n\t */\n\tinternal_domain: InternalHopDomain | null;\n\n\t/**\n\t * Port the Gateway targets (Only for external gateways)\n\t */\n\ttarget_port: number | null;\n\n\t/**\n\t * Domains associated with this gateway\n\t */\n\tdomains: Domain[];\n}\n\nexport enum DomainState {\n\tPENDING = 'pending',\n\tVALID_CNAME = 'valid_cname',\n\tSSL_ACTIVE = 'ssl_active',\n}\n\nexport interface Domain {\n\t/**\n\t * The ID of the domain\n\t */\n\tid: Id<'domain'>;\n\n\t/**\n\t * The domain name\n\t */\n\tdomain: string;\n\n\t/**\n\t * The domain state\n\t */\n\tstate: DomainState;\n\n\t/**\n\t * The date this domain was created\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type IgniteEndpoints =\n\t| Endpoint<'GET', '/v1/ignite/deployments', {deployments: Deployment[]}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t{containers: Container[]}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t{container: Container}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/containers/:container_id',\n\t\t\tnever,\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The ID of the deployment\n\t\t\t\t */\n\t\t\t\tdeployment_id: Id<'deployment'>;\n\n\t\t\t\t/**\n\t\t\t\t * The ID of the container\n\t\t\t\t */\n\t\t\t\tcontainer_id: Id<'container'>;\n\t\t\t}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments',\n\t\t\t{deployment: Deployment},\n\t\t\tDeploymentConfig\n\t  >\n\t| Endpoint<'DELETE', '/v1/ignite/deployments/:deployment_id', Empty>\n\t| Endpoint<'DELETE', '/v1/ignite/containers/:container_id', Empty>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/containers/:container_id/logs',\n\t\t\t{logs: ContainerLog[]}\n\t  >\n\t| Endpoint<'GET', '/v1/ignite/deployments/search', {deployment: Deployment}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t{deployment: Deployment}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/ignite/containers/:container_id/state',\n\t\t\tEmpty,\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The state to update the container to\n\t\t\t\t */\n\t\t\t\tpreferred_state: ContainerState.STOPPED | ContainerState.RUNNING;\n\t\t\t}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\tEmpty,\n\t\t\t{domain: string}\n\t  >\n\t| Endpoint<'GET', '/v1/ignite/gateways/:gateway_id', {gateway: Gateway}>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t{gateways: Gateway[]}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t{gateway: Gateway},\n\t\t\t{type: GatewayType; listening_port: number; protocol: Gateway['protocol']}\n\t  >;\n","import {Endpoint} from '../endpoints.js';\nimport {Regions} from './ignite.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\nexport type DeliveryProtocol = 'webrtc' | 'hls';\n\nexport interface Room {\n\t/**\n\t * The ID of this stream\n\t */\n\tid: Id<'pipe_room'>;\n\n\t/**\n\t * The name of this room\n\t */\n\tname: string;\n\n\t/**\n\t * The unix timestamp of when this stream was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Protocol you can stream with\n\t */\n\tingest_protocol: 'rtmp';\n\n\t/**\n\t * Protocols that are supported by this room to the client\n\t */\n\tdelivery_protocols: DeliveryProtocol[];\n\n\t/**\n\t * A join token to subscribe into this room\n\t */\n\tjoin_token: string;\n\n\t/**\n\t * The region that the stream url is located in\n\t */\n\tingest_region: Regions;\n\n\t/**\n\t * The URL that you can stream to\n\t */\n\tingest_endpoint: string;\n\n\t/**\n\t * The state of the stream currently\n\t */\n\tstate: 'live' | 'offline';\n}\n\nexport type PipeEndpoints =\n\t| Endpoint<'GET', '/v1/pipe/rooms', {rooms: Room[]}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/pipe/rooms',\n\t\t\t{room: Room},\n\t\t\t{\n\t\t\t\t/**\n\t\t\t\t * The name of the stream\n\t\t\t\t */\n\t\t\t\tname: string;\n\n\t\t\t\tingest_protocol: 'rtmp' | 'rtp';\n\n\t\t\t\tdelivery_protocols: DeliveryProtocol[];\n\n\t\t\t\tregion: Regions;\n\n\t\t\t\tephemeral: boolean;\n\n\t\t\t\tllhls_config?: {\n\t\t\t\t\twcl_delay: number;\n\t\t\t\t\tartificial_delay: number;\n\t\t\t\t\tmax_playout_bitrate_preset: string;\n\t\t\t\t};\n\t\t\t}\n\t  >\n\t| Endpoint<'DELETE', '/v1/pipe/rooms/:room_id', Empty>;\n","import {Endpoint} from '../endpoints.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\nimport {User} from './users.js';\n\nexport type Member = Omit<User, 'email' | 'id'> & {\n\t/**\n\t * The ID of the project member\n\t */\n\tid: Id<'pm'>;\n\n\t/**\n\t * The role that this member has in a project\n\t */\n\trole: MemberRole;\n\n\t/**\n\t * The date that this member joined the project\n\t */\n\tjoined_at: Timestamp;\n};\n\nexport enum ProjectTier {\n\tFREE = 'free',\n\tPAID = 'paid',\n}\n\nexport interface MemberRole {\n\t/**\n\t * The ID of the role\n\t */\n\tid: Id<'role'>;\n\n\t/**\n\t * The name of the role\n\t */\n\tname: string;\n\n\t/**\n\t * The flags for this role\n\t */\n\tflags: number;\n}\n\n/**\n * A project token for a project\n */\nexport interface ProjectToken {\n\t/**\n\t * The Id of the project token\n\t */\n\tid: Id<'ptkid'>;\n\n\t/**\n\t * The key value. This will likely have half of the key obfuscated\n\t */\n\ttoken: Id<'ptk'>;\n\n\t/**\n\t * The time this project token was created\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * Permissions and flags that this project token can perform\n\t */\n\tflags: number;\n}\n\n/**\n * Type of a project\n */\nexport enum ProjectType {\n\t/**\n\t * A regular project is\n\t */\n\tREGULAR = 'regular',\n\n\t/**\n\t * A personal project are created when you register an account\n\t */\n\tPERSONAL = 'personal',\n}\n\nexport interface Project {\n\t/**\n\t * The ID of the project\n\t */\n\tid: Id<'project'>;\n\n\t/**\n\t * The name of the project\n\t */\n\tname: string;\n\n\t/**\n\t * The tier this project is\n\t */\n\ttier: ProjectTier;\n\n\t/**\n\t * The time this project was created at\n\t */\n\tcreated_at: Timestamp;\n\n\t/**\n\t * An icon for this project\n\t */\n\ticon: string | null;\n\n\t/**\n\t * The registry namespace for this project\n\t */\n\tnamespace: string;\n\n\t/**\n\t * The type of this project. Either regular or personal\n\t */\n\ttype: ProjectType;\n\n\tdefault_quotas: DefaultQuotas;\n\n\tquota_overrides: QuotaOverrides;\n\n\tquota_usage: QuotaUsage;\n}\n\nexport interface DefaultQuotas {\n\tvcpu: number;\n\tram: number;\n}\n\nexport interface QuotaOverrides {}\n\nexport interface QuotaUsage {\n\tvcpu: number;\n\tram: number;\n}\n\nexport interface Secret {\n\t/**\n\t * The ID of the secret\n\t */\n\tid: Id<'secret'>;\n\n\t/**\n\t * The name of the secret\n\t */\n\tname: string;\n\n\t/**\n\t * A digest hash of the secret\n\t */\n\tdigest: string;\n\n\t/**\n\t * The time this secret was created at\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type ProjectsEndpoints =\n\t| Endpoint<\n\t\t\t'DELETE',\n\t\t\t'/v1/projects/:project_id/tokens/:project_token_id',\n\t\t\tEmpty\n\t  >\n\t| Endpoint<'DELETE', '/v1/projects/@this/tokens/:project_token_id', Empty>\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/:project_id/members/@me',\n\t\t\t{project_member: Member}\n\t  >\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t{project_tokens: ProjectToken[]}\n\t  >\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/projects/@this/tokens',\n\t\t\t{project_tokens: ProjectToken[]}\n\t  >\n\t| Endpoint<'GET', '/v1/projects/:project_id/members', {members: Member[]}>\n\t| Endpoint<'GET', '/v1/projects/@this/members', {members: Member[]}>\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t{project_token: ProjectToken & {project: Project}},\n\t\t\t{flags: number}\n\t  >\n\t| Endpoint<\n\t\t\t'POST',\n\t\t\t'/v1/projects/@this/tokens',\n\t\t\t{project_token: ProjectToken & {project: Project}},\n\t\t\t{flags: number}\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/projects/:project_id/secrets/:name',\n\t\t\t{secret: Secret},\n\t\t\tstring\n\t  >\n\t| Endpoint<\n\t\t\t'PUT',\n\t\t\t'/v1/projects/@this/secrets/:name',\n\t\t\t{secret: Secret},\n\t\t\tstring\n\t  >\n\t| Endpoint<'GET', '/v1/projects/:project_id/secrets', {secrets: Secret[]}>\n\t| Endpoint<'GET', '/v1/projects/@this/secrets', {secrets: Secret[]}>\n\t| Endpoint<'DELETE', '/v1/projects/:project_id/secrets/:secret_id', Empty>\n\t| Endpoint<'DELETE', '/v1/projects/@this/secrets/:secret_id', Empty>;\n","import {Endpoint} from '../endpoints.js';\nimport {MemberRole, Project} from './projects.js';\nimport {Empty, Id, Timestamp} from '../../util/types.js';\n\n/**\n * A user objct\n */\nexport interface User {\n\t/**\n\t * The ID of the user\n\t */\n\tid: Id<'user'>;\n\n\t/**\n\t * The name of the user. Think of this as a display name\n\t */\n\tname: string;\n\n\t/**\n\t * A unqiue username for the user\n\t */\n\tusername: string;\n\n\t/**\n\t * The email of the user\n\t */\n\temail: string;\n}\n\nexport interface PAT {\n\t/**\n\t * The ID of the pat\n\t */\n\tid: Id<'pat'>;\n\n\t/**\n\t * The name of the pat\n\t */\n\tname: string | null;\n\n\t/**\n\t * The pat token\n\t *\n\t * @warning This value will be partially censored if it\n\t */\n\tpat: string;\n\n\t/**\n\t * The date the pat was created\n\t */\n\tcreated_at: Timestamp;\n}\n\nexport type UserEndpoints =\n\t| Endpoint<\n\t\t\t'GET',\n\t\t\t'/v1/users/@me',\n\t\t\t{\n\t\t\t\tprojects: Project[];\n\t\t\t\tuser: User;\n\t\t\t\tproject_member_role_map: Record<Id<'project'>, MemberRole>;\n\t\t\t\tleap_token: string | null;\n\t\t\t}\n\t  >\n\t| Endpoint<'POST', '/v1/users/@me/pats', {pat: PAT}, {name: string}>\n\t| Endpoint<'GET', '/v1/users/@me/pats', {pats: PAT[]}>\n\t| Endpoint<'DELETE', '/v1/users/@me/pats/:pat_id', Empty>;\n","import {create} from '@onehop/json-methods';\nimport {API, Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\ntype Token = Id<'leap_token'>;\n\n/**\n * New state to set to a channel, or a callback function that will produce the new state\n */\nexport type SetStateAction<T extends API.Channels.State> =\n\t| T\n\t| ((oldState: T) => T | Promise<T>);\n\nexport const channels = sdk(client => {\n\tconst Channels = create<API.Channels.Channel>().methods({\n\t\tasync setState<T extends API.Channels.State>(state: SetStateAction<T>) {\n\t\t\tawait updateState(this.id, state, 'set');\n\t\t},\n\n\t\tasync patchState<T extends API.Channels.State>(state: SetStateAction<T>) {\n\t\t\tawait updateState(this.id, state, 'patch');\n\t\t},\n\n\t\tasync subscribeToken(token: Token) {\n\t\t\tawait channelsSDK.subscribeToken(this.id, token);\n\t\t},\n\n\t\tasync subscribeTokens(tokens: Token[] | Set<Token>) {\n\t\t\tawait channelsSDK.subscribeTokens(this.id, tokens);\n\t\t},\n\n\t\tasync publishMessage(name: string, data: unknown) {\n\t\t\tawait channelsSDK.publishMessage(this.id, name, data);\n\t\t},\n\t});\n\n\tasync function updateState<T extends API.Channels.State>(\n\t\tchannelId: API.Channels.Channel['id'],\n\t\tnewState: SetStateAction<T>,\n\t\tmode: 'patch' | 'set',\n\t) {\n\t\tlet state: API.Channels.State;\n\n\t\tif (typeof newState === 'function') {\n\t\t\tconst {state: oldState} = await client.get(\n\t\t\t\t'/v1/channels/:channel_id/state',\n\t\t\t\t{channel_id: channelId},\n\t\t\t);\n\n\t\t\tstate = await newState(oldState as T);\n\t\t} else {\n\t\t\tstate = newState;\n\t\t}\n\n\t\tif (mode === 'patch') {\n\t\t\tawait client.patch('/v1/channels/:channel_id/state', state, {\n\t\t\t\tchannel_id: channelId,\n\t\t\t});\n\t\t} else {\n\t\t\tawait client.put('/v1/channels/:channel_id/state', state, {\n\t\t\t\tchannel_id: channelId,\n\t\t\t});\n\t\t}\n\t}\n\n\tconst channelsSDK = {\n\t\t/**\n\t\t * Creates a new channel\n\t\t *\n\t\t * @param type The type of the channel to create\n\t\t * @param id An ID to assign to the channel (optional, set this to `undefined` or `null` if you do not want to specify an ID)\n\t\t * @param project A project ID (if necessary) to assign this to\n\t\t */\n\t\tasync create(\n\t\t\ttype: API.Channels.ChannelType,\n\t\t\tid?: string | null,\n\t\t\toptions?: {state?: Record<string, any>} | null,\n\t\t\tproject?: Id<'project'>,\n\t\t) {\n\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Project must be provided when creating a channel with bearer or PAT auth',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst {channel} = id\n\t\t\t\t? await client.put(\n\t\t\t\t\t\t'/v1/channels/:channel_id',\n\t\t\t\t\t\t{type, state: options?.state ?? null},\n\t\t\t\t\t\t{project, channel_id: id},\n\t\t\t\t  )\n\t\t\t\t: await client.post(\n\t\t\t\t\t\t'/v1/channels',\n\t\t\t\t\t\t{type, state: options?.state ?? null},\n\t\t\t\t\t\t{project},\n\t\t\t\t  );\n\n\t\t\treturn Channels.from(channel);\n\t\t},\n\n\t\tasync get(id: API.Channels.Channel['id']) {\n\t\t\tconst {channel} = await client.get('/v1/channels/:channel_id', {\n\t\t\t\tchannel_id: id,\n\t\t\t});\n\n\t\t\treturn Channels.from(channel);\n\t\t},\n\n\t\t/**\n\t\t * Get all channels for a project\n\t\t *\n\t\t * @param project An optional project ID if authenticating with a PAT or Bearer\n\t\t */\n\t\tasync getAll(project?: Id<'project'>) {\n\t\t\tconst {channels} = await client.get('/v1/channels', {project});\n\t\t\treturn channels.map(Channels.from);\n\t\t},\n\n\t\tasync subscribeToken(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\ttoken: Token,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tawait client.put(\n\t\t\t\t'/v1/channels/:channel_id/subscribers/:token',\n\t\t\t\tundefined,\n\t\t\t\t{channel_id: id, token},\n\t\t\t);\n\t\t},\n\n\t\tasync subscribeTokens(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\ttokens: Token[] | Set<Token>,\n\t\t) {\n\t\t\tconst promises: Array<Promise<void>> = [];\n\n\t\t\tfor (const subscription of tokens) {\n\t\t\t\tpromises.push(this.subscribeToken(channel, subscription));\n\t\t\t}\n\n\t\t\tawait Promise.allSettled(promises);\n\t\t},\n\n\t\tasync getAllTokens(\n\t\t\tchannel: API.Channels.Channel['id'] | API.Channels.Channel,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tconst {tokens} = await client.get('/v1/channels/:channel_id/tokens', {\n\t\t\t\tchannel_id: id,\n\t\t\t});\n\n\t\t\treturn tokens;\n\t\t},\n\n\t\tasync setState<T extends API.Channels.State = API.Channels.State>(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tstate: SetStateAction<T>,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\t\t\treturn updateState(id, state, 'set');\n\t\t},\n\n\t\tasync patchState<T extends API.Channels.State>(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tstate: SetStateAction<T>,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\t\t\treturn updateState(id, state, 'patch');\n\t\t},\n\n\t\tasync publishMessage(\n\t\t\tchannel: API.Channels.Channel | API.Channels.Channel['id'],\n\t\t\tname: string,\n\t\t\tdata: unknown,\n\t\t) {\n\t\t\tconst id = typeof channel === 'object' ? channel.id : channel;\n\n\t\t\tawait client.post(\n\t\t\t\t'/v1/channels/:channel_id/messages',\n\t\t\t\t{e: name, d: data},\n\t\t\t\t{channel_id: id},\n\t\t\t);\n\t\t},\n\n\t\ttokens: {\n\t\t\t/**\n\t\t\t * Creates a new channel token for a project\n\t\t\t *\n\t\t\t * @param state The state to set on the token\n\t\t\t * @param project The project to attach this token to\n\t\t\t */\n\t\t\tasync create(state: API.Channels.State, project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project must be provided when creating a channel token with bearer or PAT auth',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {token} = await client.post(\n\t\t\t\t\t'/v1/channels/tokens',\n\t\t\t\t\t{state},\n\t\t\t\t\t{project},\n\t\t\t\t);\n\n\t\t\t\treturn token;\n\t\t\t},\n\t\t},\n\t};\n\n\treturn channelsSDK;\n});\n","import {create, Infer} from '@onehop/json-methods';\nimport {API, assertId, Id} from '../rest/index.js';\nimport {Deployment, Gateway, GatewayType} from '../rest/types/ignite.js';\nimport {parseSize} from '../util/index.js';\nimport {sdk} from './create.js';\n\nconst SIX_MB_IN_BYTES = 6 * 1024 * 1024;\n\nexport const ignite = sdk(client => {\n\tconst Gateways = create<API.Ignite.Gateway>().methods({\n\t\tasync addDomain(domain: string) {\n\t\t\tawait client.post(\n\t\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\t\t{domain},\n\t\t\t\t{gateway_id: this.id},\n\t\t\t);\n\t\t},\n\t});\n\n\tconst Deployments = create<API.Ignite.Deployment>().methods({\n\t\tgetContainers() {\n\t\t\treturn igniteSDK.deployments.getContainers(this.id);\n\t\t},\n\n\t\tdelete() {\n\t\t\treturn igniteSDK.deployments.delete(this.id);\n\t\t},\n\n\t\tcreateContainer() {\n\t\t\treturn igniteSDK.containers.create(this.id);\n\t\t},\n\n\t\tcreateGateway(\n\t\t\ttype: API.Ignite.GatewayType,\n\t\t\tprotocol: API.Ignite.Gateway['protocol'],\n\t\t\tport: number,\n\t\t) {\n\t\t\treturn igniteSDK.deployments.gateways.create(\n\t\t\t\tthis.id,\n\t\t\t\ttype,\n\t\t\t\tprotocol,\n\t\t\t\tport,\n\t\t\t);\n\t\t},\n\t});\n\n\t/**\n\t * Creates a new deployment.\n\t * You should use this overload if you are authorizing with a bearer or pat.\n\t *\n\t * @param configOrProject The project ID to create the deployment in.\n\t * @param bearerOrPatConfig The deployment config to create.\n\t */\n\tasync function createDeployment(\n\t\tconfigOrProject: Id<'project'>,\n\t\tbearerOrPatConfig: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>>;\n\n\t/**\n\t * Create a new deployment. You should use this overload if you are authorizing with a project token and\n\t * not with a bearer or pat.\n\t *\n\t * @param configOrProject The config for this deployment.\n\t */\n\tasync function createDeployment(\n\t\tconfigOrProject: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>>;\n\n\tasync function createDeployment(\n\t\tconfigOrProject: Id<'project'> | API.Ignite.DeploymentConfig,\n\t\tbearerOrPatConfig?: API.Ignite.DeploymentConfig,\n\t): Promise<Infer<typeof Deployments>> {\n\t\tlet config: API.Ignite.DeploymentConfig;\n\t\tlet project: Id<'project'> | undefined = undefined;\n\n\t\tif (typeof configOrProject === 'object') {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tconfig = configOrProject;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'First argument must be the project ID when using bearer authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!bearerOrPatConfig) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Second argument must be the deployment config when using bearer authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (client.authType === 'bearer' || client.authType === 'pat') {\n\t\t\t\tproject = configOrProject;\n\t\t\t\tconfig = bearerOrPatConfig;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Only argument must be the config when using secret authentication to create deployments.',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Hop's runtime requires a minimum of 6mb of memory per container\n\t\t// It's useful to validate this at the SDK level as well as API level.\n\t\tif (parseSize(config.resources.ram) <= SIX_MB_IN_BYTES) {\n\t\t\tthrow new Error(\n\t\t\t\t'Allocated memory must be greater than 6MB when creating a deployment.',\n\t\t\t);\n\t\t}\n\n\t\tconst {deployment} = await client.post('/v1/ignite/deployments', config, {\n\t\t\tproject,\n\t\t});\n\n\t\treturn Deployments.from(deployment);\n\t}\n\n\tasync function updateContainerState(\n\t\tcontainer: Id<'container'>,\n\t\tstate:\n\t\t\t| API.Ignite.ContainerState.RUNNING\n\t\t\t| API.Ignite.ContainerState.STOPPED,\n\t) {\n\t\tawait client.put(\n\t\t\t'/v1/ignite/containers/:container_id/state',\n\t\t\t{preferred_state: state},\n\t\t\t{container_id: container},\n\t\t);\n\t}\n\n\t/**\n\t * Gets a deployment by name\n\t *\n\t * @param projectId The project ID. You only need to provide this if you are getting by name.\n\t * @param name The deployment name to get\n\t */\n\tasync function getDeployment(\n\t\tprojectId: Id<'project'>,\n\t\tname: string,\n\t): Promise<Infer<typeof Deployments>>;\n\n\t/**\n\t * Gets a deployment by id\n\t *\n\t * @param id The deployment ID\n\t */\n\tasync function getDeployment(\n\t\tid: Id<'deployment'>,\n\t): Promise<Infer<typeof Deployments>>;\n\n\tasync function getDeployment(\n\t\tprojectIdOrId: Id<'project'> | Id<'deployment'>,\n\t\tname?: string,\n\t): Promise<Infer<typeof Deployments>> {\n\t\tif (name) {\n\t\t\tassertId(\n\t\t\t\tprojectIdOrId,\n\t\t\t\t'project',\n\t\t\t\t'You must provide a project ID to get a deployment by name',\n\t\t\t);\n\n\t\t\tconst {deployment} = await client.get('/v1/ignite/deployments/search', {\n\t\t\t\tname,\n\t\t\t\tproject: projectIdOrId,\n\t\t\t});\n\n\t\t\treturn Deployments.from(deployment);\n\t\t}\n\n\t\tassertId(\n\t\t\tprojectIdOrId,\n\t\t\t'deployment',\n\t\t\t'You must provide a valid deployment ID.',\n\t\t);\n\n\t\tconst {deployment} = await client.get(\n\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t{deployment_id: projectIdOrId},\n\t\t);\n\n\t\treturn Deployments.from(deployment);\n\t}\n\n\tconst igniteSDK = {\n\t\tgateways: {\n\t\t\t/**\n\t\t\t * Adds a domain to a gateway\n\t\t\t *\n\t\t\t * @param gatewayId The ID of the gateway\n\t\t\t * @param domain The full name of the domain\n\t\t\t */\n\t\t\tasync addDomain(gatewayId: Id<'gateway'>, domain: string) {\n\t\t\t\tawait client.post(\n\t\t\t\t\t'/v1/ignite/gateways/:gateway_id/domains',\n\t\t\t\t\t{domain},\n\t\t\t\t\t{gateway_id: gatewayId},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Fetches a gateway by ID\n\t\t\t *\n\t\t\t * @param gatewayId The ID of the gateway to retrieve\n\t\t\t */\n\t\t\tasync get(gatewayId: Id<'gateway'>) {\n\t\t\t\tconst {gateway} = await client.get('/v1/ignite/gateways/:gateway_id', {\n\t\t\t\t\tgateway_id: gatewayId,\n\t\t\t\t});\n\n\t\t\t\treturn gateway;\n\t\t\t},\n\t\t},\n\n\t\tdeployments: {\n\t\t\tcreate: createDeployment,\n\t\t\tget: getDeployment,\n\n\t\t\t/**\n\t\t\t * Get all containers for a deployment\n\t\t\t *\n\t\t\t * @param deployment The ID of the deployment to get\n\t\t\t * @returns A list of all containers for that project\n\t\t\t */\n\t\t\tasync getContainers(deployment: Id<'deployment'>) {\n\t\t\t\tconst {containers} = await client.get(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\n\t\t\t\treturn containers;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Gets all deployments for a project\n\t\t\t *\n\t\t\t * @param projectId The project ID to list deployments for. You only need to provide this if you are using bearer or PAT authentication.\n\t\t\t * @returns A list of deployments for the given project.\n\t\t\t */\n\t\t\tasync getAll(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for Bearer or PAT authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (client.authType === 'ptk' && projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is not required for secret authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {deployments} = await client.get(\n\t\t\t\t\t'/v1/ignite/deployments',\n\t\t\t\t\tprojectId ? {project: projectId} : {},\n\t\t\t\t);\n\n\t\t\t\treturn deployments.map(Deployments.from);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a deployment\n\t\t\t *\n\t\t\t * @param deployment The ID of the deployment\n\t\t\t */\n\t\t\tasync delete(deployment: Id<'deployment'>) {\n\t\t\t\tawait client.delete(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tgateways: {\n\t\t\t\t/**\n\t\t\t\t * Fecthes all gateways attached to a deployment\n\t\t\t\t *\n\t\t\t\t * @param deploymentId The ID of the deployment to fetch gateways for\n\t\t\t\t */\n\t\t\t\tasync getAll(deploymentId: Id<'deployment'>) {\n\t\t\t\t\tconst {gateways} = await client.get(\n\t\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t\t\t\t{deployment_id: deploymentId},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn gateways.map(Gateways.from);\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * Creates and attaches a gateway to a deployment\n\t\t\t\t *\n\t\t\t\t * @param deployment The deployment to create a gateway on\n\t\t\t\t * @param type The type of the gatway to create, either internal or external\n\t\t\t\t * @param protocol The protocol that the gateway will listen for\n\t\t\t\t * @param listeningPort The port to listen on\n\t\t\t\t */\n\t\t\t\tasync create(\n\t\t\t\t\tdeployment: Deployment | Deployment['id'],\n\t\t\t\t\ttype: GatewayType,\n\t\t\t\t\tprotocol: Gateway['protocol'],\n\t\t\t\t\tlisteningPort: number,\n\t\t\t\t) {\n\t\t\t\t\tconst deploymentId =\n\t\t\t\t\t\ttypeof deployment === 'object' ? deployment.id : deployment;\n\n\t\t\t\t\tconst {gateway} = await client.post(\n\t\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/gateways',\n\t\t\t\t\t\t{type, protocol, listening_port: listeningPort},\n\t\t\t\t\t\t{deployment_id: deploymentId},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn Gateways.from(gateway);\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\n\t\tcontainers: {\n\t\t\t/**\n\t\t\t * Deletes a container\n\t\t\t *\n\t\t\t * @param container The ID of the container to delete.\n\t\t\t */\n\t\t\tasync delete(container: Id<'container'>) {\n\t\t\t\tawait client.delete('/v1/ignite/containers/:container_id', undefined, {\n\t\t\t\t\tcontainer_id: container,\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get the logs for a container\n\t\t\t *\n\t\t\t * @param container The ID of the container\n\t\t\t * @returns\n\t\t\t */\n\t\t\tasync getLogs(\n\t\t\t\tcontainer: Id<'container'>,\n\t\t\t\toptions: Partial<{\n\t\t\t\t\tsortBy: 'timestamp';\n\t\t\t\t\torderBy: 'desc' | 'asc';\n\t\t\t\t\tlimit: number;\n\t\t\t\t\toffset: number;\n\t\t\t\t}> = {},\n\t\t\t) {\n\t\t\t\tconst {logs} = await client.get(\n\t\t\t\t\t'/v1/ignite/containers/:container_id/logs',\n\t\t\t\t\t{container_id: container, ...options},\n\t\t\t\t);\n\n\t\t\t\treturn logs;\n\t\t\t},\n\n\t\t\tasync stop(container: Id<'container'>) {\n\t\t\t\tawait updateContainerState(\n\t\t\t\t\tcontainer,\n\t\t\t\t\tAPI.Ignite.ContainerState.STOPPED,\n\t\t\t\t);\n\t\t\t},\n\n\t\t\tasync start(container: Id<'container'>) {\n\t\t\t\tawait updateContainerState(\n\t\t\t\t\tcontainer,\n\t\t\t\t\tAPI.Ignite.ContainerState.RUNNING,\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a container\n\t\t\t *\n\t\t\t * @param deployment The ID of a deployment to create a container in.\n\t\t\t * @returns The newly created container.\n\t\t\t */\n\t\t\tasync create(deployment: Id<'deployment'>) {\n\t\t\t\tconst {container} = await client.post(\n\t\t\t\t\t'/v1/ignite/deployments/:deployment_id/containers',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{deployment_id: deployment},\n\t\t\t\t);\n\n\t\t\t\treturn container;\n\t\t\t},\n\t\t},\n\t};\n\n\treturn igniteSDK;\n});\n","export const units = ['gb', 'mb', 'kb', 'b'] as const;\n\nexport type ByteString = `${number}${typeof units[number]}`;\n\nexport function isValidByteString(value: string): value is ByteString {\n\treturn units.some(unit => {\n\t\tif (!value.endsWith(unit)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !isNaN(parseFloat(value.slice(0, -unit.length)));\n\t});\n}\n\n/**\n * Parses a byte size string into bytes\n * @param size The size of anything in gigabytes, megabytes, kilobytes or bytes\n */\nexport function parseSize(size: string) {\n\tsize = size.toLowerCase();\n\n\tconst unit = units.find(u => size.endsWith(u));\n\tif (!unit) {\n\t\tthrow new Error(`Invalid size: ${size}`);\n\t}\n\n\tconst num = parseFloat(size.slice(0, -unit.length));\n\tif (isNaN(num)) {\n\t\tthrow new Error(`Invalid size: ${size}`);\n\t}\n\n\tswitch (unit.toLowerCase()) {\n\t\tcase 'gb':\n\t\t\treturn num * 1024 * 1024 * 1024;\n\t\tcase 'mb':\n\t\t\treturn num * 1024 * 1024;\n\t\tcase 'kb':\n\t\t\treturn num * 1024;\n\t\tcase 'b':\n\t\tdefault:\n\t\t\treturn num;\n\t}\n}\n","import {create} from '@onehop/json-methods';\nimport {API, Id} from '../rest/index.js';\nimport {Regions} from '../rest/types/ignite.js';\nimport {DeliveryProtocol} from '../rest/types/pipe.js';\nimport {sdk} from './create.js';\n\nexport const pipe = sdk(client => {\n\tconst Rooms = create<API.Pipe.Room>().methods({\n\t\tasync delete() {\n\t\t\tawait pipeSDK.rooms.delete(this.id);\n\t\t},\n\t});\n\n\tconst pipeSDK = {\n\t\trooms: {\n\t\t\tasync getAll(project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You must provide ID project id when using a bearer or pat token.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {rooms} = await client.get('/v1/pipe/rooms', {project});\n\n\t\t\t\treturn rooms.map(Rooms.from);\n\t\t\t},\n\n\t\t\tasync create(\n\t\t\t\tname: string,\n\t\t\t\toptions: {\n\t\t\t\t\tdeliveryProtocols: DeliveryProtocol[];\n\t\t\t\t\tephemeral?: boolean;\n\t\t\t\t\tingestProtocol: 'rtmp' | 'rtp';\n\t\t\t\t\thlsConfig?: {\n\t\t\t\t\t\twcl_delay: number;\n\t\t\t\t\t\tartificial_delay: number;\n\t\t\t\t\t\tmax_playout_bitrate_preset: string;\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t) {\n\t\t\t\tconst {room} = await client.post(\n\t\t\t\t\t'/v1/pipe/rooms',\n\t\t\t\t\t{\n\t\t\t\t\t\tname,\n\n\t\t\t\t\t\tingest_protocol: options.ingestProtocol,\n\t\t\t\t\t\tregion: Regions.US_EAST_1,\n\n\t\t\t\t\t\tephemeral: options.ephemeral ?? false,\n\n\t\t\t\t\t\tdelivery_protocols: options.deliveryProtocols,\n\t\t\t\t\t\tllhls_config: options.hlsConfig,\n\t\t\t\t\t},\n\t\t\t\t\t{},\n\t\t\t\t);\n\n\t\t\t\treturn Rooms.from(room);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a Pipe room\n\t\t\t *\n\t\t\t * @param room The ID of the Pipe room to delete.\n\t\t\t */\n\t\t\tasync delete(room: Id<'pipe_room'>) {\n\t\t\t\tawait client.delete('/v1/pipe/rooms/:room_id', undefined, {\n\t\t\t\t\troom_id: room,\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t};\n\n\treturn pipeSDK;\n});\n","import {Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\nexport const projects = sdk(client => {\n\treturn {\n\t\tasync getAllMembers(projectId?: Id<'project'>) {\n\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Project ID is required for bearer or PAT authentication to fetch all project members',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (projectId) {\n\t\t\t\tconst {members} = await client.get('/v1/projects/:project_id/members', {\n\t\t\t\t\tproject_id: projectId,\n\t\t\t\t});\n\n\t\t\t\treturn members;\n\t\t\t}\n\n\t\t\tconst {members} = await client.get('/v1/projects/@this/members', {});\n\n\t\t\treturn members;\n\t\t},\n\n\t\t/**\n\t\t * Fetch the currently authorized member from a project.\n\t\t * You cannot use this route if you are authorizing with a project token as there is no user attached to it.\n\t\t *\n\t\t * @param projectId The project ID to fetch a member from\n\t\t * @returns The member authorized by the SDK\n\t\t */\n\t\tasync getCurrentMember(projectId: Id<'project'>) {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'You cannot resolve a member from a project token! You must use a bearer or pat token',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst {project_member: member} = await client.get(\n\t\t\t\t'/v1/projects/:project_id/members/@me',\n\t\t\t\t{project_id: projectId},\n\t\t\t);\n\n\t\t\treturn member;\n\t\t},\n\n\t\tprojectTokens: {\n\t\t\t/**\n\t\t\t * Deletes a project token by its ID\n\t\t\t *\n\t\t\t * @param projectTokenId The ID of the project token to delete\n\t\t\t */\n\t\t\tasync delete(projectTokenId: Id<'ptkid'>, project?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !project) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to delete a project token',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(\n\t\t\t\t\tproject\n\t\t\t\t\t\t? '/v1/projects/:project_id/tokens/:project_token_id'\n\t\t\t\t\t\t: '/v1/projects/@this/tokens/:project_token_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\tproject\n\t\t\t\t\t\t? {project_id: project, project_token_id: projectTokenId}\n\t\t\t\t\t\t: {project_token_id: projectTokenId},\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Get all project tokens for a project\n\t\t\t *\n\t\t\t * @param projectId The project to fetch secrets for\n\t\t\t * @returns An array of all secrets for the project\n\t\t\t */\n\t\t\tasync get(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {project_tokens: keys} = await client.get(\n\t\t\t\t\t\t'/v1/projects/@this/tokens',\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn keys;\n\t\t\t\t}\n\n\t\t\t\tconst {project_tokens: keys} = await client.get(\n\t\t\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t\t\t{project_id: projectId},\n\t\t\t\t);\n\n\t\t\t\treturn keys;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a new project token\n\t\t\t *\n\t\t\t * @param projectId The project to create a key for\n\t\t\t * @param flags Permissions for this flag\n\t\t\t * @returns A newly created project token\n\t\t\t */\n\t\t\tasync create(flags: number, projectId?: Id<'project'>) {\n\t\t\t\tif (!projectId && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to create a project token',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {project_token: token} = await client.post(\n\t\t\t\t\t\t'/v1/projects/@this/tokens',\n\t\t\t\t\t\t{flags},\n\t\t\t\t\t\t{},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn token;\n\t\t\t\t}\n\n\t\t\t\tconst {project_token: token} = await client.post(\n\t\t\t\t\t'/v1/projects/:project_id/tokens',\n\t\t\t\t\t{flags},\n\t\t\t\t\t{project_id: projectId},\n\t\t\t\t);\n\n\t\t\t\treturn token;\n\t\t\t},\n\t\t},\n\n\t\tsecrets: {\n\t\t\t/**\n\t\t\t * Gets all secrets in a project\n\t\t\t *\n\t\t\t * @param projectId The project to fetch secrets for\n\t\t\t */\n\t\t\tasync getAll(projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to fetch all secrets',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst {secrets} = await client.get('/v1/projects/@this/secrets', {});\n\n\t\t\t\t\treturn secrets;\n\t\t\t\t}\n\n\t\t\t\tconst {secrets} = await client.get('/v1/projects/:project_id/secrets', {\n\t\t\t\t\tproject_id: projectId,\n\t\t\t\t});\n\n\t\t\t\treturn secrets;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a new project secret\n\t\t\t *\n\t\t\t * @param name The name of the secret\n\t\t\t * @param value The value of the secret\n\t\t\t * @param projectId The project to create the secret in\n\t\t\t */\n\t\t\tasync create(name: string, value: string, projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to create a secret',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tconst s = await client.put(\n\t\t\t\t\t\t'/v1/projects/@this/secrets/:name',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tconsole.log(s);\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\n\t\t\t\tconst {secret} = await client.put(\n\t\t\t\t\t'/v1/projects/:project_id/secrets/:name',\n\t\t\t\t\tvalue,\n\t\t\t\t\t{project_id: projectId, name},\n\t\t\t\t);\n\n\t\t\t\treturn secret;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a secret from a project\n\t\t\t *\n\t\t\t * @param id The secret ID to delete\n\t\t\t * @param projectId The project to delete the secret from\n\t\t\t */\n\t\t\tasync delete(id: Id<'secret'>, projectId?: Id<'project'>) {\n\t\t\t\tif (client.authType !== 'ptk' && !projectId) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Project ID is required for bearer or PAT authentication to delete a secret',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (!projectId) {\n\t\t\t\t\tawait client.delete(\n\t\t\t\t\t\t'/v1/projects/@this/secrets/:secret_id',\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsecret_id: id,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(\n\t\t\t\t\t'/v1/projects/:project_id/secrets/:secret_id',\n\t\t\t\t\tundefined,\n\t\t\t\t\t{secret_id: id, project_id: projectId},\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n});\n","import {Id} from '../rest/index.js';\nimport {sdk} from './create.js';\n\nexport const registry = sdk(client => {\n\treturn {\n\t\timages: {\n\t\t\tasync getAll(project?: Id<'project'>) {\n\t\t\t\tif (!project && client.authType !== 'ptk') {\n\t\t\t\t\tthrow new Error('Project is required when using a PAT or bearer');\n\t\t\t\t}\n\n\t\t\t\tconst {images} = await client.get('/v1/registry/images', {\n\t\t\t\t\tproject,\n\t\t\t\t});\n\n\t\t\t\treturn images;\n\t\t\t},\n\n\t\t\tasync getManifest(image: string) {\n\t\t\t\tconst {manifests} = await client.get(\n\t\t\t\t\t'/v1/registry/images/:image/manifests',\n\t\t\t\t\t{image},\n\t\t\t\t);\n\n\t\t\t\treturn manifests;\n\t\t\t},\n\n\t\t\tasync delete(image: string) {\n\t\t\t\tawait client.delete('/v1/registry/images/:image', undefined, {image});\n\t\t\t},\n\t\t},\n\t};\n});\n","import {Id} from '../util/types.js';\nimport {sdk} from './create.js';\n\nexport const users = sdk(client => ({\n\tme: {\n\t\t/**\n\t\t * Gets the current user\n\t\t *\n\t\t * @returns The current user authorized by the SDK\n\t\t */\n\t\tasync get() {\n\t\t\tif (client.authType === 'ptk') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'You cannot resolve a user from a project token! You must use a Bearer or PAT.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst me = await client.get('/v1/users/@me', {});\n\n\t\t\treturn me;\n\t\t},\n\n\t\tpats: {\n\t\t\t/**\n\t\t\t * Creates a PAT for the current user\n\t\t\t *\n\t\t\t * @returns The created PAT\n\t\t\t */\n\t\t\tasync create(name: string) {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot create a PAT from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {pat} = await client.post('/v1/users/@me/pats', {name}, {});\n\n\t\t\t\treturn pat;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Fetches all PATs for this user\n\t\t\t *\n\t\t\t * @returns A list of all pats\n\t\t\t */\n\t\t\tasync getAll() {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot get all PATs from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst {pats} = await client.get('/v1/users/@me/pats', {});\n\n\t\t\t\treturn pats;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deletes a pat\n\t\t\t *\n\t\t\t * @param id The ID of the pat to delete\n\t\t\t */\n\t\t\tasync delete(id: Id<'pat'>) {\n\t\t\t\tif (client.authType === 'ptk') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'You cannot delete a PAT from a project token! You must use a Bearer or PAT.',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tawait client.delete(`/v1/users/@me/pats/:pat_id`, undefined, {\n\t\t\t\t\tpat_id: id,\n\t\t\t\t});\n\t\t\t},\n\t\t},\n\t},\n}));\n","import {APIAuthentication, APIClient, APIClientOptions} from './rest/client.js';\nimport {\n\tchannels,\n\tignite,\n\tpipe,\n\tprojects,\n\tregistry,\n\tusers,\n} from './sdks/index.js';\nimport {DEFAULT_BASE_URL} from './util/constants.js';\n\nexport type PartialAPIOptions = Partial<\n\tOmit<APIClientOptions, 'authentication'>\n> &\n\tPick<APIClientOptions, 'authentication'>;\n\n/**\n * Constructs a new instance of Hop and all of its SDKs.\n *\n * @example\n * ```ts\n * const hop = new Hop(bearerTokenOrPATOrProjectToken);\n * await hop.ignite.containers.create(deploymentId);\n * ```\n */\nexport class Hop {\n\tpublic readonly client: APIClient;\n\n\tpublic readonly ignite;\n\tpublic readonly users;\n\tpublic readonly projects;\n\tpublic readonly pipe;\n\tpublic readonly registry;\n\tpublic readonly channels;\n\n\tconstructor(options: PartialAPIOptions);\n\tconstructor(authentication: APIAuthentication, baseurl?: string);\n\n\tconstructor(\n\t\tauthenticationOrOptions: APIAuthentication | PartialAPIOptions,\n\t\tbaseUrl = DEFAULT_BASE_URL,\n\t) {\n\t\tif (\n\t\t\t!authenticationOrOptions ||\n\t\t\t(typeof authenticationOrOptions === 'object' &&\n\t\t\t\t!authenticationOrOptions.authentication)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'Missing authentication token to `new Hop()` — please provide a valid Project Token, User Bearer or Personal Access Token',\n\t\t\t);\n\t\t}\n\n\t\tthis.client = new APIClient(\n\t\t\ttypeof authenticationOrOptions === 'object'\n\t\t\t\t? {baseUrl: DEFAULT_BASE_URL, ...authenticationOrOptions}\n\t\t\t\t: {authentication: authenticationOrOptions, baseUrl},\n\t\t);\n\n\t\tthis.ignite = ignite(this.client);\n\t\tthis.users = users(this.client);\n\t\tthis.projects = projects(this.client);\n\t\tthis.pipe = pipe(this.client);\n\t\tthis.registry = registry(this.client);\n\t\tthis.channels = channels(this.client);\n\t}\n}\n","export enum PROJECT_PERMISSION {\n\tADD_MEMBER = 'add_member',\n\tREMOVE_MEMBER = 'remove_member',\n\tGET_PROJECT_MEMBERS = 'get_project_members',\n\tDELETE_PROJECT = 'delete_project',\n\tDELETE_DEPLOYMENT = 'delete_deployment',\n\tDELETE_CONTAINER = 'delete_container',\n\tUPDATE_CONTAINER_STATE = 'update_container_state',\n\tREAD_DEPLOYMENTS = 'read_deployments',\n\tCREATE_DEPLOYMENT = 'create_deployment',\n\tCREATE_CONTAINER = 'create_container',\n\tUPDATE_CONTAINER_CONFIG = 'update_container_config',\n\tCREATE_ROOM = 'create_room',\n\tREAD_ROOM = 'read_room',\n\tDELETE_ROOM = 'delete_room',\n\tCREATE_ROOM_PRODUCER = 'create_room_producer',\n\tCREATE_PROJECT_TOKEN = 'create_project_token',\n\tDELETE_PROJECT_TOKEN = 'delete_project_token',\n\tREAD_PROJECT_TOKENS = 'read_project_tokens',\n\tREAD_CONTAINER_LOGS = 'read_container_logs',\n\tCREATE_PROJECT_SECRET = 'create_project_secret',\n\tREAD_PROJECT_SECRETS = 'read_project_secrets',\n\tDELETE_PROJECT_SECRET = 'delete_project_secret',\n\tGET_REGISTRY_IMAGES = 'get_registry_images',\n\tCREATE_CHANNEL = 'create_channel',\n\tCREATE_CHANNEL_TOKEN = 'create_channel_token',\n\tCREATE_LEAP_TOKEN = 'create_leap_token',\n\tCREATE_GATEWAY = 'create_gateway',\n\tADD_DOMAIN = 'add_domain',\n\tDELETE_CHANNELS = 'delete_channels',\n\tUPDATE_CHANNEL_STATE = 'update_channel_state',\n\tPUBLISH_CHANNEL_MESSAGES = 'publish_channel_messages',\n\tREAD_CHANNELS = 'read_channels',\n\tREAD_LEAP_TOKENS = 'read_leap_tokens',\n\tMANAGE_CHANNEL_SUBSCRIBERS = 'manage_channel_subscribers',\n\tUPDATE_LEAP_TOKEN = 'update_leap_token',\n\tDELETE_DOMAIN = 'delete_domain',\n\tDELETE_GATEWAY = 'delete_gateway',\n\tGET_INTERNAL_DOMAIN = 'get_internal_domain',\n\tMESSAGE_TOKEN = 'message_token',\n\tROLLOUT = 'rollout',\n\tREQUEST_QUOTA_INCREASE = 'request_quota_increase',\n\tREAD_BILLING = 'read_billing',\n\tREAD_GATEWAYS = 'read_gateways',\n\tDELETE_REGISTRY_IMAGES = 'delete_registry_images',\n}\n\nexport const permissionsMap = {\n\t[PROJECT_PERMISSION.ADD_MEMBER]: 1n << 0n,\n\t[PROJECT_PERMISSION.REMOVE_MEMBER]: 1n << 1n,\n\t[PROJECT_PERMISSION.GET_PROJECT_MEMBERS]: 1n << 2n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT]: 1n << 3n,\n\t[PROJECT_PERMISSION.DELETE_DEPLOYMENT]: 1n << 4n,\n\t[PROJECT_PERMISSION.DELETE_CONTAINER]: 1n << 5n,\n\t[PROJECT_PERMISSION.UPDATE_CONTAINER_STATE]: 1n << 6n,\n\t[PROJECT_PERMISSION.READ_DEPLOYMENTS]: 1n << 7n,\n\t[PROJECT_PERMISSION.CREATE_DEPLOYMENT]: 1n << 8n,\n\t[PROJECT_PERMISSION.CREATE_CONTAINER]: 1n << 9n,\n\t[PROJECT_PERMISSION.UPDATE_CONTAINER_CONFIG]: 1n << 10n,\n\t[PROJECT_PERMISSION.CREATE_ROOM]: 1n << 11n,\n\t[PROJECT_PERMISSION.READ_ROOM]: 1n << 12n,\n\t[PROJECT_PERMISSION.DELETE_ROOM]: 1n << 13n,\n\t[PROJECT_PERMISSION.CREATE_ROOM_PRODUCER]: 1n << 14n,\n\t[PROJECT_PERMISSION.CREATE_PROJECT_TOKEN]: 1n << 15n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT_TOKEN]: 1n << 16n,\n\t[PROJECT_PERMISSION.READ_PROJECT_TOKENS]: 1n << 17n,\n\t[PROJECT_PERMISSION.READ_CONTAINER_LOGS]: 1n << 18n,\n\t[PROJECT_PERMISSION.CREATE_PROJECT_SECRET]: 1n << 19n,\n\t[PROJECT_PERMISSION.READ_PROJECT_SECRETS]: 1n << 20n,\n\t[PROJECT_PERMISSION.DELETE_PROJECT_SECRET]: 1n << 21n,\n\t[PROJECT_PERMISSION.GET_REGISTRY_IMAGES]: 1n << 22n,\n\t[PROJECT_PERMISSION.CREATE_CHANNEL_TOKEN]: 1n << 24n,\n\t[PROJECT_PERMISSION.CREATE_GATEWAY]: 1n << 25n,\n\t[PROJECT_PERMISSION.ADD_DOMAIN]: 1n << 26n,\n\t[PROJECT_PERMISSION.DELETE_CHANNELS]: 1n << 27n,\n\t[PROJECT_PERMISSION.UPDATE_CHANNEL_STATE]: 1n << 28n,\n\t[PROJECT_PERMISSION.READ_CHANNELS]: 1n << 29n,\n\t[PROJECT_PERMISSION.PUBLISH_CHANNEL_MESSAGES]: 1n << 30n,\n\t[PROJECT_PERMISSION.MANAGE_CHANNEL_SUBSCRIBERS]: 1n << 31n,\n\t[PROJECT_PERMISSION.DELETE_DOMAIN]: 1n << 32n,\n\t[PROJECT_PERMISSION.DELETE_GATEWAY]: 1n << 33n,\n\t[PROJECT_PERMISSION.GET_INTERNAL_DOMAIN]: 1n << 34n,\n\t[PROJECT_PERMISSION.CREATE_LEAP_TOKEN]: 1n << 35n,\n\t[PROJECT_PERMISSION.READ_LEAP_TOKENS]: 1n << 36n,\n\t[PROJECT_PERMISSION.UPDATE_LEAP_TOKEN]: 1n << 37n,\n\t[PROJECT_PERMISSION.MESSAGE_TOKEN]: 1n << 38n,\n\t[PROJECT_PERMISSION.CREATE_CHANNEL]: 1n << 39n,\n\t[PROJECT_PERMISSION.ROLLOUT]: 1n << 40n,\n\t[PROJECT_PERMISSION.REQUEST_QUOTA_INCREASE]: 1n << 41n,\n\t[PROJECT_PERMISSION.READ_BILLING]: 1n << 42n,\n\t[PROJECT_PERMISSION.READ_GATEWAYS]: 1n << 43n,\n\t[PROJECT_PERMISSION.DELETE_REGISTRY_IMAGES]: 1n << 44n,\n};\n\nexport const BROAD_PERMISSIONS_MAP = {\n\tMANAGE_MEMBERS:\n\t\tpermissionsMap.add_member |\n\t\tpermissionsMap.remove_member |\n\t\tpermissionsMap.get_project_members,\n\tMANAGE_PROJECT_TOKENS:\n\t\tpermissionsMap.create_project_token |\n\t\tpermissionsMap.delete_project_token |\n\t\tpermissionsMap.read_project_tokens,\n\tMANAGE_DEPLOYMENTS:\n\t\tpermissionsMap.create_container |\n\t\tpermissionsMap.delete_container |\n\t\tpermissionsMap.update_container_state |\n\t\tpermissionsMap.read_container_logs |\n\t\tpermissionsMap.update_container_config |\n\t\tpermissionsMap.add_domain |\n\t\tpermissionsMap.delete_domain |\n\t\tpermissionsMap.create_deployment |\n\t\tpermissionsMap.delete_deployment |\n\t\tpermissionsMap.read_deployments |\n\t\tpermissionsMap.rollout |\n\t\tpermissionsMap.delete_gateway |\n\t\tpermissionsMap.get_internal_domain,\n\tMANAGE_PIPE:\n\t\tpermissionsMap.create_room |\n\t\tpermissionsMap.delete_room |\n\t\tpermissionsMap.read_room,\n\tMANAGE_SECRETS:\n\t\tpermissionsMap.create_project_secret |\n\t\tpermissionsMap.delete_project_secret |\n\t\tpermissionsMap.read_project_secrets,\n\tMANAGE_CHANNELS:\n\t\tpermissionsMap.create_leap_token |\n\t\tpermissionsMap.create_channel_token |\n\t\tpermissionsMap.create_gateway |\n\t\tpermissionsMap.read_leap_tokens |\n\t\tpermissionsMap.update_leap_token |\n\t\tpermissionsMap.create_channel |\n\t\tpermissionsMap.delete_channels |\n\t\tpermissionsMap.update_channel_state |\n\t\tpermissionsMap.read_channels |\n\t\tpermissionsMap.publish_channel_messages |\n\t\tpermissionsMap.manage_channel_subscribers |\n\t\tpermissionsMap.message_token,\n\tMANAGE_REGISTRY:\n\t\tpermissionsMap.get_registry_images | permissionsMap.delete_registry_images,\n\tREAD_ONLY:\n\t\tpermissionsMap.read_deployments |\n\t\tpermissionsMap.read_container_logs |\n\t\tpermissionsMap.read_room |\n\t\tpermissionsMap.read_channels |\n\t\tpermissionsMap.read_project_tokens |\n\t\tpermissionsMap.read_project_secrets |\n\t\tpermissionsMap.read_leap_tokens |\n\t\tpermissionsMap.get_project_members |\n\t\tpermissionsMap.read_gateways,\n\tMANAGE_QUOTAS: permissionsMap.request_quota_increase,\n\tMANAGE_ROLLOUTS: permissionsMap.rollout,\n\tMANAGE_BILLING: permissionsMap.read_billing,\n};\n\nexport const roles = {\n\tviewer: BROAD_PERMISSIONS_MAP.READ_ONLY,\n\teditor:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.READ_ONLY,\n\tadmin:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_MEMBERS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PROJECT_TOKENS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_QUOTAS |\n\t\tBROAD_PERMISSIONS_MAP.READ_ONLY,\n\towner:\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_CHANNELS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_DEPLOYMENTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_MEMBERS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PIPE |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_PROJECT_TOKENS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_SECRETS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_REGISTRY |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_QUOTAS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_ROLLOUTS |\n\t\tBROAD_PERMISSIONS_MAP.MANAGE_BILLING,\n};\n\nexport const permissions = {\n\tadd(value: bigint, flag: bigint) {\n\t\treturn BigInt(value) | BigInt(flag);\n\t},\n\n\ttest(value: bigint, flag: bigint) {\n\t\treturn Boolean(BigInt(value) & BigInt(flag));\n\t},\n\n\tsubtract(value: bigint, flag: bigint) {\n\t\treturn BigInt(value) & ~BigInt(flag);\n\t},\n};\n"]}